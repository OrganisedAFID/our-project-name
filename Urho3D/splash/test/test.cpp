#define BOOST_TEST_MODULE SplashTests
#include <boost/test/unit_test.hpp>
#include "fft.h"
#include <stdio.h>      /* printf */
#include <math.h>       /* sin */
#include <fftw3.h>
#include <iostream>
#include <cstdlib>
#include <math.h>
#include <cstring>
#include <stdio.h>
#include <vector>
#include <complex>     
#include <string>
#include <algorithm>
using namespace std;


 std::vector<double> result={0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511
};


 std::vector<double> output;
std::vector<double> expected={0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0.000922654,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
100.004,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
};


/*
BOOST_AUTO_TEST_CASE(mytest_1)
{
	
 BOOST_CHECK_EQUAL(60, fft(result, output));

}

BOOST_AUTO_TEST_CASE(mytest_2)
{
	
 BOOST_CHECK_EQUAL(30, fft(result, output));

}
*/

BOOST_AUTO_TEST_CASE(mytest_1){
//BOOST_REQUIRE_EQUAL(output.size(), expected.size());
fft(result, output);
for( int i = 0; i < result.size()-180; ++i )
{
    BOOST_CHECK_EQUAL(output[i], expected[i]);
    
}
}
