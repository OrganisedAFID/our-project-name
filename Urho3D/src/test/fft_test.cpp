/**
 * @file fft_test.cpp
 * Unit test to check that the resultant fast fourier transform vector of a sine wave matches up to its expected fast fourier transform vector
 */

/************************************************************************/
/*! 
*  (C) Copyright Gennadiy Rozental 2002-2006.
*  (C) Copyright Gennadiy Rozental & Ullrich Koethe 2001.
*  Distributed under the Boost Software License, Version 1.0.
*  (See accompanying file LICENSE_1_0.txt or copy at 
*  http://www.boost.org/LICENSE_1_0.txt)

* See http://www.boost.org/libs/test for the library home page.
*/
/************************************************************************/


#define BOOST_TEST_MODULE SplashTests
#include <boost/test/unit_test.hpp>
#include <vector>
#include "fft.h"
#include <fftw3.h>
using namespace std;


 std::vector<double> result={0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511, 
-0.0000, 
0.9511, 
-0.5878, 
-0.5878, 
0.9511, 
0.0000, 
-0.9511, 
0.5878, 
0.5878, 
-0.9511
};


 std::vector<double> output;
std::vector<double> expected={0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0.000922654,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
100.004,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
};



BOOST_AUTO_TEST_SUITE( test_suite1 )

BOOST_AUTO_TEST_CASE(mytest_1){
//BOOST_REQUIRE_EQUAL(output.size(), expected.size());
fft(result, output);
for( int i = 0; i < result.size()-180; ++i )
{
    BOOST_CHECK_EQUAL(output[i], expected[i]);
    
    
}
}


BOOST_AUTO_TEST_SUITE_END()
